package com.daniilyurov.training.project.web.model.dao.api;

/**
 * <p>Any class implementing this interface should ensure
 * that all GenericRepositoryManager methods return Repositories do not commit changes.</p>
 *
 * <p>Changes are committed or rolled back using corresponding
 * methods declared in this interface:</p>
 * <ul>
 *      <li>commit();</li>
 *      <li>rollback();</li>
 * </ul>
 *
 * <p>Example. Assuming that:</p>
 * <ul>
 *      <li><em>getTransactionalRepositoryManager()</em> returns an instance of
 *          TransactionalRepositoryManager implementation;</li>
 *      <li><em>user1</em> and <em>user2</em> are instances of User to be persisted in an atomic way.</li>
 * </ul>
 * <p>Then the code below will persist all users only if it succeeds to persist them all,
 * otherwise it will rollback changes:</p>
 *
 * <pre>
 *     TransactionalRepositoryManager transactionalRepositoryFactory = null;
 *     try {
 *         transactionalRepositoryManager = getTransactionalRepositoryManager(); // starts transaction
 *         UserRepository userRepository = transactionalRepositoryManager.getUserRepository();
 *         userRepository.create(user1);
 *         userRepository.create(user2);
 *         transactionalRepositoryManager.commit(); // ends transaction if all operations were successful
 *     } catch (DaoException e) {
 *         // do corresponding logging
 *         if (transactionalRepositoryManager != null) {
 *             transactionalRepositoryManager.rollback(); // rollbacks transaction if something has failed
 *         }
 *     }
 * </pre>
 * <p><strong>Note:</strong></p>
 * <ul>
 *     <li>Data <em>will not</em> be persisted/updated/deleted unless you explicitly call <em>commit()</em>.</li>
 *     <li><strong>WARNING:</strong> forgetting to rollback/commit <strong>MAY CAUSE PERFORMANCE AND DATA
 *     CONSISTENCY ISSUES.</strong></li>
 * </ul>
 *
 * @author Daniil Yurov
 */


public interface TransactionalRepositoryManager extends GenericRepositoryManager {

    /**
     * Finishes transaction.
     * Commits all changes that were performed by Repository instances
     * generated by the instance of the class implementing this interface.
     *
     * @throws DaoException - if it fails to commit.
     */
    void commit() throws DaoException;

    /**
     * Finishes transaction.
     * Rolls back all changes that were performed by Repository instances
     * generated by the instance of the class implementing this interface.
     */
    void rollback();

    /**
     * Returns true if the transaction has been committed.
     * @return true if committed, false otherwise
     */
    boolean isCommitted();

}
